Origin: commit:e41dfe64fcde752faa7d378acd86fe676c09769f
Author: Michal Vasko <mvasko@cesnet.cz>
Subject: libyang BUGFIX actually make symbols hidden by default
Last-Update: 2018-11-08

Tests that required some internal functions were
separated and they use special libyang objects.

Fixes #657

diff --git a/CMakeLists.txt b/CMakeLists.txt
index d6f87942b302..976b828522c5 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -252,12 +252,15 @@ else()
     add_library(yangobj OBJECT ${libsrc})
     add_library(yang SHARED $<TARGET_OBJECTS:yangobj>)
 
+    #only for tests with visible internal symbols
+    add_library(yangobj_tests OBJECT ${libsrc})
+
     #link dl
     target_link_libraries(yang ${CMAKE_DL_LIBS})
 endif(ENABLE_STATIC)
 
 set_target_properties(yang PROPERTIES VERSION ${LIBYANG_VERSION} SOVERSION ${LIBYANG_SOVERSION})
-set_target_properties(yang PROPERTIES COMPILE_FLAGS "-fvisibility=hidden")
+set_target_properties(yangobj PROPERTIES COMPILE_FLAGS "-fvisibility=hidden")
 
 # link math
 target_link_libraries(yang m)
diff --git a/src/extensions.h b/src/extensions.h
index 1ccbefa849c1..f24303780d55 100644
--- a/src/extensions.h
+++ b/src/extensions.h
@@ -222,6 +222,19 @@ void lyext_log(const struct ly_ctx *ctx, LY_LOG_LEVEL level, const char *plugin,
 #define LYEXT_LOG(ctx, level, plugin, str, args...)       \
     lyext_log(ctx, level, plugin, __func__, str, ##args); \
 
+/**
+ * @brief Free iffeature structure. In API only for plugins that want to handle if-feature statements similarly
+ * to libyang.
+ *
+ * @param[in] ctx libyang context.
+ * @param[in] iffeature iffeature array to free.
+ * @param[in] iffeature_size size of array \p iffeature.
+ * @param[in] shallow Whether to make only shallow free.
+ * @param[in] private_destructor Custom destructor for freeing any extension instances.
+ */
+void lys_iffeature_free(struct ly_ctx *ctx, struct lys_iffeature *iffeature, uint8_t iffeature_size, int shallow,
+                        void (*private_destructor)(const struct lys_node *node, void *priv));
+
 /**
  * @}
  */
diff --git a/src/extensions/yangdata.c b/src/extensions/yangdata.c
index 982704be3e17..d66cea6cb050 100755
--- a/src/extensions/yangdata.c
+++ b/src/extensions/yangdata.c
@@ -1,5 +1,5 @@
 /**
- * @file yang-data.c
+ * @file yangdata.c
  * @author Pavol Vican <vican.pavol@gmail.com>
  * @brief libyang extension plugin - YANG DATA (RFC 8040)
  *
@@ -21,8 +21,6 @@
 #include <stdlib.h>
 #include "../extensions.h"
 
-void lys_iffeature_free(struct ly_ctx *ctx, struct lys_iffeature *iffeature, uint8_t iffeature_size,
-                        void (*private_destructor)(const struct lys_node *node, void *priv));
 int check_node(struct lys_node *node);
 
 /**
@@ -94,7 +92,7 @@ int check_node(struct lys_node *node) {
 
 void remove_iffeature(struct lys_iffeature **iffeature, uint8_t *iffeature_size, struct ly_ctx *ctx) {
 
-    lys_iffeature_free(ctx, *iffeature, *iffeature_size, NULL);
+    lys_iffeature_free(ctx, *iffeature, *iffeature_size, 0, NULL);
     *iffeature_size = 0;
     *iffeature = NULL;
 }
diff --git a/src/hash_table.c b/src/hash_table.c
index f465546802cc..77448545e140 100644
--- a/src/hash_table.c
+++ b/src/hash_table.c
@@ -266,7 +266,7 @@ lydict_insert_zc(struct ly_ctx *ctx, char *value)
     return result;
 }
 
-static struct ht_rec *
+struct ht_rec *
 lyht_get_rec(unsigned char *recs, uint16_t rec_size, uint32_t idx)
 {
     return (struct ht_rec *)&recs[idx * rec_size];
diff --git a/src/hash_table.h b/src/hash_table.h
index fa5ac65db960..82abfe456310 100644
--- a/src/hash_table.h
+++ b/src/hash_table.h
@@ -112,6 +112,16 @@ void lydict_init(struct dict_table *dict);
  */
 void lydict_clean(struct dict_table *dict);
 
+/**
+ * @brief Get a specific record from a hash table.
+ *
+ * @param[in] recs Hash table records.
+ * @param[in] rec_size Size of one hash table record.
+ * @param[in] idx Index of the record.
+ * @return Record from \p recs on index \p idx.
+ */
+struct ht_rec *lyht_get_rec(unsigned char *recs, uint16_t rec_size, uint32_t idx);
+
 /**
  * @brief Create new hash table.
  *
diff --git a/src/log.c b/src/log.c
index ff6de8cc43ea..f0aef86637ed 100644
--- a/src/log.c
+++ b/src/log.c
@@ -280,7 +280,7 @@ ly_log_dbg(int group, const char *format, ...)
 
 #endif
 
-void
+API void
 lyext_log(const struct ly_ctx *ctx, LY_LOG_LEVEL level, const char *plugin, const char *function, const char *format, ...)
 {
     va_list ap;
diff --git a/src/tree_schema.c b/src/tree_schema.c
index 11c6927484d7..c4a4b815e2be 100755
--- a/src/tree_schema.c
+++ b/src/tree_schema.c
@@ -1613,7 +1613,7 @@ lys_restr_free(struct ly_ctx *ctx, struct lys_restr *restr,
     lydict_remove(ctx, restr->emsg);
 }
 
-void
+API void
 lys_iffeature_free(struct ly_ctx *ctx, struct lys_iffeature *iffeature, uint8_t iffeature_size,
                    int shallow, void (*private_destructor)(const struct lys_node *node, void *priv))
 {
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index 51600b3b9a0c..e2e9b77944d7 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -6,18 +6,17 @@ set(CMAKE_MACOSX_RPATH TRUE)
 # Set TESTS_DIR to realpath
 get_filename_component(TESTS_DIR "${CMAKE_SOURCE_DIR}/tests" REALPATH)
 
-set(api_tests test_libyang test_tree_schema test_xml test_dict test_tree_data test_tree_data_dup test_tree_data_merge test_xpath test_xpath_1.1 test_diff test_hash_table)
-set(data_tests test_data_initialization test_leafref_remove test_instid_remove test_keys test_autodel test_when test_when_1.1 test_must_1.1 test_defaults test_emptycont test_unique test_mandatory test_json test_parse_print test_values test_metadata test_yangtypes_xpath test_yang_data test_state_lists test_unknown_element test_lyb)
+set(api_tests test_libyang test_tree_schema test_xml test_dict test_tree_data test_tree_data_dup test_tree_data_merge test_xpath test_xpath_1.1 test_diff)
+set(data_tests test_data_initialization test_leafref_remove test_instid_remove test_keys test_autodel test_when test_when_1.1 test_must_1.1 test_defaults test_emptycont test_unique test_mandatory test_json test_parse_print test_values test_metadata test_yangtypes_xpath test_yang_data test_unknown_element)
 set(schema_yin_tests test_print_transform)
 set(schema_tests test_ietf test_augment test_deviation test_refine test_typedef test_import test_include test_feature test_conformance test_leaflist test_status test_printer)
 if(CMAKE_BUILD_TYPE MATCHES debug)
     list(APPEND schema_tests test_extensions)
 endif(CMAKE_BUILD_TYPE MATCHES debug)
 set(conformance_tests test_sec6_1_1 test_sec6_2 test_sec5_1 test_sec5_5 test_sec6_1_3 test_sec6_2_1 test_sec7_1 test_sec7_2 test_sec7_3 test_sec7_3_1 test_sec7_3_4 test_sec7_5_2 test_sec7_5_4 test_sec7_5_5 test_sec7_6_2 test_sec7_6_3 test_sec7_6_4 test_sec7_6_5 test_sec7_7_2 test_sec7_7_3 test_sec7_7_4 test_sec7_7_5 test_sec7_8_1 test_sec7_8_2 test_sec7_8_3 test_sec7_9_1 test_sec7_9_2 test_sec7_9_3 test_sec7_9_4 test_sec7_10 test_sec7_11 test_sec7_12_1 test_sec7_12_2 test_sec7_13_1 test_sec7_13_2 test_sec7_13_3 test_sec7_14 test_sec7_15 test_sec7_16_1 test_sec7_16_2 test_sec7_18_1 test_sec7_18_2 test_sec7_18_3_1 test_sec7_18_3_2 test_sec7_19_1 test_sec7_19_2 test_sec7_19_5 test_sec9_2 test_sec9_3 test_sec9_4_4 test_sec9_4_6 test_sec9_5 test_sec9_6 test_sec9_7 test_sec9_8 test_sec9_9 test_sec9_10 test_sec9_11 test_sec9_12 test_sec9_13)
+set(internal_tests test_lyb test_hash_table test_state_lists)
 
 include_directories(SYSTEM ${CMOCKA_INCLUDE_DIR})
-# To allow including hash_table.c/h
-include_directories(${CMAKE_SOURCE_DIR}/src)
 
 foreach(test_name IN LISTS api_tests)
     add_executable(${test_name} api/${test_name}.c)
@@ -39,8 +38,12 @@ foreach(test_name IN LISTS conformance_tests)
     add_executable(${test_name} conformance/${test_name}.c)
 endforeach(test_name)
 
+foreach(test_name IN LISTS internal_tests)
+    add_executable(${test_name} internal/${test_name}.c $<TARGET_OBJECTS:yangobj_tests>)
+endforeach(test_name)
+
 # Set common attributes of all tests
-foreach(test_name IN LISTS api_tests data_tests schema_yin_tests schema_tests conformance_tests)
+foreach(test_name IN LISTS api_tests data_tests schema_yin_tests schema_tests conformance_tests internal_tests)
     target_link_libraries(${test_name} ${CMOCKA_LIBRARIES} yang)
     add_test(NAME ${test_name} COMMAND $<TARGET_FILE:${test_name}>)
     set_property(TEST ${test_name} PROPERTY ENVIRONMENT "LIBYANG_EXTENSIONS_PLUGINS_DIR=${CMAKE_BINARY_DIR}/src/extensions")
@@ -58,7 +61,7 @@ else()
 
     if(ENABLE_VALGRIND_TESTS)
         if(VALGRIND_FOUND)
-            foreach(test_name IN LISTS api_tests data_tests schema_yin_tests schema_tests conformance_tests)
+            foreach(test_name IN LISTS api_tests data_tests schema_yin_tests schema_tests conformance_tests internal_tests)
                 add_test(${test_name}_valgrind valgrind --leak-check=full --show-leak-kinds=all --suppressions=${PROJECT_SOURCE_DIR}/tests/ld.supp --error-exitcode=1
                      ${CMAKE_BINARY_DIR}/tests/${test_name})
                 set_property(TEST ${test_name}_valgrind PROPERTY ENVIRONMENT "LIBYANG_EXTENSIONS_PLUGINS_DIR=${CMAKE_BINARY_DIR}/src/extensions")
diff --git a/tests/api/test_hash_table.c b/tests/internal/test_hash_table.c
similarity index 98%
rename from tests/api/test_hash_table.c
rename to tests/internal/test_hash_table.c
index 15c0f6cece52..23a5cd53c37e 100644
--- a/tests/api/test_hash_table.c
+++ b/tests/internal/test_hash_table.c
@@ -20,9 +20,6 @@
 
 #include "tests/config.h"
 #include "libyang.h"
-
-/* include hash_table directly as it is not a part of public API */
-#include "hash_table.c"
 #include "hash_table.h"
 
 static struct hash_table *ht;
diff --git a/tests/data/test_lyb.c b/tests/internal/test_lyb.c
similarity index 100%
rename from tests/data/test_lyb.c
rename to tests/internal/test_lyb.c
diff --git a/tests/data/test_state_lists.c b/tests/internal/test_state_lists.c
similarity index 99%
rename from tests/data/test_state_lists.c
rename to tests/internal/test_state_lists.c
index e7dfb6cff996..cda7e73534f0 100644
--- a/tests/data/test_state_lists.c
+++ b/tests/internal/test_state_lists.c
@@ -17,10 +17,12 @@
 #include <setjmp.h>
 #include <stdarg.h>
 #include <cmocka.h>
+#include <assert.h>
 
 #include "libyang.h"
 #include "tree_internal.h"
 #include "tests/config.h"
+#include "hash_table.h"
 
 struct state {
     struct ly_ctx *ctx;
@@ -32,10 +34,6 @@ const char *datafile = TESTS_DIR"/data/files/state-lists1.xml";
 
 #ifdef LY_ENABLED_CACHE
 
-/* include hash_table directly as it is not a part of public API */
-#include "hash_table.c"
-#include "hash_table.h"
-
 static void
 lyd_hash_check(struct lyd_node *node)
 {
-- 
2.19.1

