# SymbolsHelper-Confirmed: 1.0.176 amd64
libyang-cpp.so.1 libyang-cpp1 #MINVER#
* Build-Depends-Package: libyang-cpp-dev
 (c++)"libyang::Refine_Mod::list()@Base" 1.0.130
 (c++)"libyang::Refine_Mod::Refine_Mod(lys_refine_mod, unsigned short, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Refine_Mod::Refine_Mod(lys_refine_mod, unsigned short, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Refine_Mod::~Refine_Mod()@Base" 1.0.130
 (c++)"libyang::Refine_Mod::~Refine_Mod()@Base" 1.0.130
 (c++)"libyang::Schema_Node::xpath_atomize(lyxp_node_type, char const*, int)@Base" 1.0.130
 (c++)"libyang::Schema_Node::xpath_atomize(int)@Base" 1.0.130
 (c++)"libyang::Schema_Node::child_instantiables(int)@Base" 1.0.130
 (c++)"libyang::Schema_Node::ext()@Base" 1.0.130
 (c++)"libyang::Schema_Node::next()@Base" 1.0.130
 (c++|optional=jessie)"libyang::Schema_Node::path[abi:cxx11](int)@Base" 1.0.130
 (c++)"libyang::Schema_Node::prev()@Base" 1.0.130
 (c++)"libyang::Schema_Node::child()@Base" 1.0.130
 (c++)"libyang::Schema_Node::module()@Base" 1.0.130
 (c++)"libyang::Schema_Node::parent()@Base" 1.0.130
 (c++)"libyang::Schema_Node::tree_dfs()@Base" 1.0.130
 (c++)"libyang::Schema_Node::tree_for()@Base" 1.0.130
 (c++)"libyang::Schema_Node::find_path(char const*)@Base" 1.0.130
 (c++)"libyang::Schema_Node::Schema_Node(lys_node*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Schema_Node::Schema_Node(lys_node*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Schema_Node::~Schema_Node()@Base" 1.0.130
 (c++)"libyang::Schema_Node::~Schema_Node()@Base" 1.0.130
 (c++)"libyang::Schema_Node::~Schema_Node()@Base" 1.0.130
 (c++)"libyang::Ext_Instance::ext()@Base" 1.0.130
 (c++)"libyang::Ext_Instance::Ext_Instance(lys_ext_instance*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Ext_Instance::Ext_Instance(lys_ext_instance*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Ext_Instance::~Ext_Instance()@Base" 1.0.130
 (c++)"libyang::Ext_Instance::~Ext_Instance()@Base" 1.0.130
 (c++)"libyang::Type_Info_Num::range()@Base" 1.0.130
 (c++)"libyang::Type_Info_Num::Type_Info_Num(lys_type_info_num*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Num::Type_Info_Num(lys_type_info_num*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Num::~Type_Info_Num()@Base" 1.0.130
 (c++)"libyang::Type_Info_Num::~Type_Info_Num()@Base" 1.0.130
 (c++)"libyang::Type_Info_Str::length()@Base" 1.0.130
 (c++)"libyang::Type_Info_Str::patterns()@Base" 1.0.130
 (c++)"libyang::Type_Info_Str::Type_Info_Str(lys_type_info_str*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Str::Type_Info_Str(lys_type_info_str*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Str::~Type_Info_Str()@Base" 1.0.130
 (c++)"libyang::Type_Info_Str::~Type_Info_Str()@Base" 1.0.130
 (c++)"libyang::get_ly_errors(std::shared_ptr<libyang::Context>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Bits::bit()@Base" 1.0.130
 (c++)"libyang::Type_Info_Bits::Type_Info_Bits(lys_type_info_bits*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Bits::Type_Info_Bits(lys_type_info_bits*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Bits::~Type_Info_Bits()@Base" 1.0.130
 (c++)"libyang::Type_Info_Bits::~Type_Info_Bits()@Base" 1.0.130
 (c++)"libyang::Type_Info_Inst::Type_Info_Inst(lys_type_info_inst*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Inst::Type_Info_Inst(lys_type_info_inst*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Inst::~Type_Info_Inst()@Base" 1.0.130
 (c++)"libyang::Type_Info_Inst::~Type_Info_Inst()@Base" 1.0.130
 (c++)"libyang::Type_Info_Lref::target()@Base" 1.0.130
 (c++)"libyang::Type_Info_Lref::Type_Info_Lref(lys_type_info_lref*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Lref::Type_Info_Lref(lys_type_info_lref*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Lref::~Type_Info_Lref()@Base" 1.0.130
 (c++)"libyang::Type_Info_Lref::~Type_Info_Lref()@Base" 1.0.130
 (c++)"libyang::Refine_Mod_List::Refine_Mod_List(lys_refine_mod_list*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Refine_Mod_List::Refine_Mod_List(lys_refine_mod_list*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Refine_Mod_List::~Refine_Mod_List()@Base" 1.0.130
 (c++)"libyang::Refine_Mod_List::~Refine_Mod_List()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Grp::tpdf()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Grp::~Schema_Node_Grp()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Grp::~Schema_Node_Grp()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Grp::~Schema_Node_Grp()@Base" 1.0.130
 (c++)"libyang::Type_Info_Dec64::range()@Base" 1.0.130
 (c++)"libyang::Type_Info_Dec64::Type_Info_Dec64(lys_type_info_dec64*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Dec64::Type_Info_Dec64(lys_type_info_dec64*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Dec64::~Type_Info_Dec64()@Base" 1.0.130
 (c++)"libyang::Type_Info_Dec64::~Type_Info_Dec64()@Base" 1.0.130
 (c++)"libyang::Type_Info_Enums::enm()@Base" 1.0.130
 (c++)"libyang::Type_Info_Enums::Type_Info_Enums(lys_type_info_enums*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Enums::Type_Info_Enums(lys_type_info_enums*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Enums::~Type_Info_Enums()@Base" 1.0.130
 (c++)"libyang::Type_Info_Enums::~Type_Info_Enums()@Base" 1.0.130
 (c++)"libyang::Type_Info_Ident::ref()@Base" 1.0.130
 (c++)"libyang::Type_Info_Ident::Type_Info_Ident(lys_type_info_ident*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Ident::Type_Info_Ident(lys_type_info_ident*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Ident::~Type_Info_Ident()@Base" 1.0.130
 (c++)"libyang::Type_Info_Ident::~Type_Info_Ident()@Base" 1.0.130
 (c++)"libyang::Type_Info_Union::types()@Base" 1.0.130
 (c++)"libyang::Type_Info_Union::Type_Info_Union(lys_type_info_union*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Union::Type_Info_Union(lys_type_info_union*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Union::~Type_Info_Union()@Base" 1.0.130
 (c++)"libyang::Type_Info_Union::~Type_Info_Union()@Base" 1.0.130
 (c++)"libyang::set_log_options(int)@Base" 1.0.130
 (c++)"libyang::Schema_Node_Case::when()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Case::~Schema_Node_Case()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Case::~Schema_Node_Case()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Case::~Schema_Node_Case()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Leaf::type()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Leaf::when()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Leaf::child()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Leaf::is_key()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Leaf::~Schema_Node_Leaf()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Leaf::~Schema_Node_Leaf()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Leaf::~Schema_Node_Leaf()@Base" 1.0.130
 (c++)"libyang::Schema_Node_List::keys()@Base" 1.0.130
 (c++)"libyang::Schema_Node_List::must()@Base" 1.0.130
 (c++)"libyang::Schema_Node_List::tpdf()@Base" 1.0.130
 (c++)"libyang::Schema_Node_List::when()@Base" 1.0.130
 (c++)"libyang::Schema_Node_List::unique()@Base" 1.0.130
 (c++)"libyang::Schema_Node_List::~Schema_Node_List()@Base" 1.0.130
 (c++)"libyang::Schema_Node_List::~Schema_Node_List()@Base" 1.0.130
 (c++)"libyang::Schema_Node_List::~Schema_Node_List()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Uses::grp()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Uses::when()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Uses::refine()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Uses::augment()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Uses::~Schema_Node_Uses()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Uses::~Schema_Node_Uses()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Uses::~Schema_Node_Uses()@Base" 1.0.130
 (c++)"libyang::Type_Info_Binary::length()@Base" 1.0.130
 (c++)"libyang::Type_Info_Binary::Type_Info_Binary(lys_type_info_binary*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Binary::Type_Info_Binary(lys_type_info_binary*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info_Binary::~Type_Info_Binary()@Base" 1.0.130
 (c++)"libyang::Type_Info_Binary::~Type_Info_Binary()@Base" 1.0.130
 (c++)"libyang::Data_Node_Anydata::child()@Base" 1.0.130
 (c++)"libyang::Data_Node_Anydata::Data_Node_Anydata(lyd_node*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Data_Node_Anydata::Data_Node_Anydata(std::shared_ptr<libyang::Data_Node>)@Base" 1.0.130
 (c++)"libyang::Data_Node_Anydata::Data_Node_Anydata(lyd_node*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Data_Node_Anydata::Data_Node_Anydata(std::shared_ptr<libyang::Data_Node>)@Base" 1.0.130
 (c++)"libyang::Data_Node_Anydata::~Data_Node_Anydata()@Base" 1.0.130
 (c++)"libyang::Data_Node_Anydata::~Data_Node_Anydata()@Base" 1.0.130
 (c++)"libyang::Data_Node_Anydata::~Data_Node_Anydata()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Inout::must()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Inout::tpdf()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Inout::~Schema_Node_Inout()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Inout::~Schema_Node_Inout()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Inout::~Schema_Node_Inout()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Notif::must()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Notif::tpdf()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Notif::~Schema_Node_Notif()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Notif::~Schema_Node_Notif()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Notif::~Schema_Node_Notif()@Base" 1.0.130
 (c++)"libyang::set_log_verbosity(LY_LOG_LEVEL)@Base" 1.0.130
 (c++)"libyang::Schema_Node_Choice::dflt()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Choice::when()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Choice::~Schema_Node_Choice()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Choice::~Schema_Node_Choice()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Choice::~Schema_Node_Choice()@Base" 1.0.130
 (c++)"libyang::create_new_Context(ly_ctx*)@Base" 1.0.130
 (c++)"libyang::Data_Node_Leaf_List::wd_default()@Base" 1.0.130
 (c++)"libyang::Data_Node_Leaf_List::change_leaf(char const*)@Base" 1.0.130
 (c++)"libyang::Data_Node_Leaf_List::child()@Base" 1.0.130
 (c++)"libyang::Data_Node_Leaf_List::value()@Base" 1.0.130
 (c++)"libyang::Data_Node_Leaf_List::leaf_type()@Base" 1.0.130
 (c++)"libyang::Data_Node_Leaf_List::Data_Node_Leaf_List(lyd_node*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Data_Node_Leaf_List::Data_Node_Leaf_List(std::shared_ptr<libyang::Data_Node>)@Base" 1.0.130
 (c++)"libyang::Data_Node_Leaf_List::Data_Node_Leaf_List(lyd_node*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Data_Node_Leaf_List::Data_Node_Leaf_List(std::shared_ptr<libyang::Data_Node>)@Base" 1.0.130
 (c++)"libyang::Data_Node_Leaf_List::~Data_Node_Leaf_List()@Base" 1.0.130
 (c++)"libyang::Data_Node_Leaf_List::~Data_Node_Leaf_List()@Base" 1.0.130
 (c++)"libyang::Data_Node_Leaf_List::~Data_Node_Leaf_List()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Anydata::must()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Anydata::when()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Anydata::~Schema_Node_Anydata()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Anydata::~Schema_Node_Anydata()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Anydata::~Schema_Node_Anydata()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Augment::when()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Augment::~Schema_Node_Augment()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Augment::~Schema_Node_Augment()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Augment::~Schema_Node_Augment()@Base" 1.0.130
 (c++)"libyang::check_libyang_error(ly_ctx*)@Base" 1.0.130
 (c++|optional=jessie)"libyang::Schema_Node_Leaflist::dflt[abi:cxx11]()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Leaflist::must()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Leaflist::type()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Leaflist::when()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Leaflist::child()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Leaflist::~Schema_Node_Leaflist()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Leaflist::~Schema_Node_Leaflist()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Leaflist::~Schema_Node_Leaflist()@Base" 1.0.130
 (c++)"libyang::create_new_Data_Node(lyd_node*)@Base" 1.0.130
 (c++)"libyang::Schema_Node_Container::must()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Container::ptdf()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Container::when()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Container::~Schema_Node_Container()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Container::~Schema_Node_Container()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Container::~Schema_Node_Container()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Rpc_Action::tpdf()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Rpc_Action::~Schema_Node_Rpc_Action()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Rpc_Action::~Schema_Node_Rpc_Action()@Base" 1.0.130
 (c++)"libyang::Schema_Node_Rpc_Action::~Schema_Node_Rpc_Action()@Base" 1.0.130
 (c++)"libyang::Ext::ext_instance()@Base" 1.0.130
 (c++)"libyang::Ext::module()@Base" 1.0.130
 (c++)"libyang::Ext::Ext(lys_ext*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Ext::Ext(lys_ext*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Ext::~Ext()@Base" 1.0.130
 (c++)"libyang::Ext::~Ext()@Base" 1.0.130
 (c++)"libyang::Set::rm(std::shared_ptr<libyang::Schema_Node>)@Base" 1.0.130
 (c++)"libyang::Set::rm(std::shared_ptr<libyang::Data_Node>)@Base" 1.0.130
 (c++)"libyang::Set::add(std::shared_ptr<libyang::Schema_Node>, int)@Base" 1.0.130
 (c++)"libyang::Set::add(std::shared_ptr<libyang::Data_Node>, int)@Base" 1.0.130
 (c++)"libyang::Set::dup()@Base" 1.0.130
 (c++)"libyang::Set::data()@Base" 1.0.130
 (c++)"libyang::Set::clean()@Base" 1.0.130
 (c++)"libyang::Set::schema()@Base" 1.0.130
 (c++)"libyang::Set::contains(std::shared_ptr<libyang::Schema_Node>)@Base" 1.0.130
 (c++)"libyang::Set::contains(std::shared_ptr<libyang::Data_Node>)@Base" 1.0.130
 (c++)"libyang::Set::rm_index(unsigned int)@Base" 1.0.130
 (c++)"libyang::Set::Set(ly_set*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Set::Set()@Base" 1.0.130
 (c++)"libyang::Set::Set(ly_set*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Set::Set()@Base" 1.0.130
 (c++)"libyang::Set::~Set()@Base" 1.0.130
 (c++)"libyang::Set::~Set()@Base" 1.0.130
 (c++)"libyang::Attr::next()@Base" 1.0.130
 (c++)"libyang::Attr::value()@Base" 1.0.130
 (c++)"libyang::Attr::Attr(lyd_attr*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Attr::Attr(lyd_attr*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Attr::~Attr()@Base" 1.0.130
 (c++)"libyang::Attr::~Attr()@Base" 1.0.130
 (c++)"libyang::Tpdf::type()@Base" 1.0.130
 (c++)"libyang::Tpdf::Tpdf(lys_tpdf*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Tpdf::Tpdf(lys_tpdf*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Tpdf::~Tpdf()@Base" 1.0.130
 (c++)"libyang::Tpdf::~Tpdf()@Base" 1.0.130
 (c++)"libyang::Type::der()@Base" 1.0.130
 (c++)"libyang::Type::ext()@Base" 1.0.130
 (c++)"libyang::Type::info()@Base" 1.0.130
 (c++)"libyang::Type::parent()@Base" 1.0.130
 (c++)"libyang::Type::Type(lys_type*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type::Type(lys_type*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type::~Type()@Base" 1.0.130
 (c++)"libyang::Type::~Type()@Base" 1.0.130
 (c++)"libyang::When::ext()@Base" 1.0.130
 (c++)"libyang::When::When(lys_when*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::When::When(lys_when*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::When::~When()@Base" 1.0.130
 (c++)"libyang::When::~When()@Base" 1.0.130
 (c++)"libyang::Error::Error(ly_err_item*)@Base" 1.0.130
 (c++)"libyang::Error::Error(ly_err_item*)@Base" 1.0.130
 (c++)"libyang::Ident::base()@Base" 1.0.130
 (c++)"libyang::Ident::Ident(lys_ident*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Ident::Ident(lys_ident*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Ident::~Ident()@Base" 1.0.130
 (c++)"libyang::Ident::~Ident()@Base" 1.0.130
 (c++)"libyang::Restr::Restr(lys_restr*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Restr::Restr(lys_restr*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Restr::~Restr()@Base" 1.0.130
 (c++)"libyang::Restr::~Restr()@Base" 1.0.130
 (c++)"libyang::Value::bit()@Base" 1.0.130
 (c++)"libyang::Value::leafref()@Base" 1.0.130
 (c++)"libyang::Value::instance()@Base" 1.0.130
 (c++)"libyang::Value::Value(lyd_value_u, LY_DATA_TYPE*, unsigned char, lys_type*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Value::Value(lyd_value_u, LY_DATA_TYPE*, unsigned char, lys_type*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Value::~Value()@Base" 1.0.130
 (c++)"libyang::Value::~Value()@Base" 1.0.130
 (c++)"libyang::Import::Import(lys_import*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Import::Import(lys_import*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Import::~Import()@Base" 1.0.130
 (c++)"libyang::Import::~Import()@Base" 1.0.130
 (c++)"libyang::Module::feature_state(char const*)@Base" 1.0.130
 (c++)"libyang::Module::feature_enable(char const*)@Base" 1.0.130
 (c++)"libyang::Module::feature_disable(char const*)@Base" 1.0.130
 (c++)"libyang::Module::data_instantiables(int)@Base" 1.0.130
 (c++)"libyang::Module::rev()@Base" 1.0.130
 (c++)"libyang::Module::deviation()@Base" 1.0.130
 (c++|optional=jessie)"libyang::Module::print_mem[abi:cxx11](LYS_OUTFORMAT, char const*, int)@Base" 1.0.130
 (c++|optional=jessie)"libyang::Module::print_mem[abi:cxx11](LYS_OUTFORMAT, int)@Base" 1.0.130
 (c++)"libyang::Module::Module(lys_module*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Module::Module(lys_module*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Module::~Module()@Base" 1.0.130
 (c++)"libyang::Module::~Module()@Base" 1.0.130
 (c++)"libyang::Refine::ext()@Base" 1.0.130
 (c++)"libyang::Refine::mod()@Base" 1.0.130
 (c++)"libyang::Refine::must()@Base" 1.0.130
 (c++)"libyang::Refine::module()@Base" 1.0.130
 (c++)"libyang::Refine::Refine(lys_refine*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Refine::Refine(lys_refine*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Refine::~Refine()@Base" 1.0.130
 (c++)"libyang::Refine::~Refine()@Base" 1.0.130
 (c++)"libyang::Unique::Unique(lys_unique*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Unique::Unique(lys_unique*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Unique::~Unique()@Base" 1.0.130
 (c++)"libyang::Unique::~Unique()@Base" 1.0.130
 (c++)"libyang::Xml_Ns::next()@Base" 1.0.130
 (c++)"libyang::Xml_Ns::Xml_Ns(lyxml_ns const*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Xml_Ns::Xml_Ns(lyxml_ns const*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Xml_Ns::~Xml_Ns()@Base" 1.0.130
 (c++)"libyang::Xml_Ns::~Xml_Ns()@Base" 1.0.130
 (c++)"libyang::Context::get_module(char const*, char const*, int)@Base" 1.0.130
 (c++)"libyang::Context::load_module(char const*, char const*)@Base" 1.0.130
 (c++)"libyang::Context::get_submodule(char const*, char const*, char const*, char const*)@Base" 1.0.130
 (c++)"libyang::Context::parse_data_fd(int, LYD_FORMAT, int)@Base" 1.0.130
 (c++)"libyang::Context::set_searchdir(char const*)@Base" 1.0.130
 (c++|optional=jessie)"libyang::Context::get_searchdirs[abi:cxx11]()@Base" 1.0.130
 (c++)"libyang::Context::get_submodule2(std::shared_ptr<libyang::Module>, char const*)@Base" 1.0.130
 (c++)"libyang::Context::parse_data_mem(char const*, LYD_FORMAT, int)@Base" 1.0.130
 (c++)"libyang::Context::parse_data_xml(std::shared_ptr<libyang::Xml_Elem>, int)@Base" 1.0.130
 (c++)"libyang::Context::get_module_iter()@Base" 1.0.130
 (c++)"libyang::Context::parse_data_path(char const*, LYD_FORMAT, int)@Base" 1.0.130
 (c++)"libyang::Context::parse_module_fd(int, LYS_INFORMAT)@Base" 1.0.130
 (c++)"libyang::Context::get_module_by_ns(char const*, char const*, int)@Base" 1.0.130
 (c++)"libyang::Context::get_module_older(std::shared_ptr<libyang::Module>)@Base" 1.0.130
 (c++)"libyang::Context::parse_module_mem(char const*, LYS_INFORMAT)@Base" 1.0.130
 (c++)"libyang::Context::parse_module_path(char const*, LYS_INFORMAT)@Base" 1.0.130
 (c++)"libyang::Context::cpp_mod_missing_cb(char const*, char const*, char const*, char const*, void*, LYS_INFORMAT*, void (**)(void*, void*))@Base" 1.0.130
 (c++)"libyang::Context::data_instantiables(int)@Base" 1.0.130
 (c++)"libyang::Context::cpp_mod_missing_deleter(void*, void*)@Base" 1.0.130
 (c++)"libyang::Context::get_disabled_module_iter()@Base" 1.0.130
 (c++|optional=templinst)"libyang::Context::add_missing_module_callback(std::function<libyang::Context::mod_missing_cb_return (char const*, char const*, char const*, char const*)> const&, std::function<void (void*)> const&)@Base" 1.0.130
 (c++)"libyang::Context::info()@Base" 1.0.130
 (c++)"libyang::Context::clean()@Base" 1.0.130
 (c++)"libyang::Context::get_node(std::shared_ptr<libyang::Schema_Node>, char const*, int)@Base" 1.0.130
 (c++)"libyang::Context::find_path(char const*)@Base" 1.0.130
 (c++)"libyang::Context::Context(ly_ctx*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Context::Context(char const*, LYD_FORMAT, char const*, int)@Base" 1.0.130
 (c++)"libyang::Context::Context(char const*, char const*, LYD_FORMAT, int)@Base" 1.0.130
 (c++)"libyang::Context::Context(char const*, int)@Base" 1.0.130
 (c++)"libyang::Context::Context(ly_ctx*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Context::Context(char const*, LYD_FORMAT, char const*, int)@Base" 1.0.130
 (c++)"libyang::Context::Context(char const*, char const*, LYD_FORMAT, int)@Base" 1.0.130
 (c++)"libyang::Context::Context(char const*, int)@Base" 1.0.130
 (c++)"libyang::Context::~Context()@Base" 1.0.130
 (c++)"libyang::Context::~Context()@Base" 1.0.130
 (c++)"libyang::Deleter::Deleter(lys_module*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Deleter::Deleter(lyd_difflist*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Deleter::Deleter(lys_submodule*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Deleter::Deleter(ly_ctx*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Deleter::Deleter(ly_set*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Deleter::Deleter(lyd_node*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Deleter::Deleter(lys_node*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Deleter::Deleter(std::shared_ptr<libyang::Context>, lyxml_elem*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Deleter::Deleter(lys_module*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Deleter::Deleter(lyd_difflist*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Deleter::Deleter(lys_submodule*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Deleter::Deleter(ly_ctx*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Deleter::Deleter(ly_set*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Deleter::Deleter(lyd_node*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Deleter::Deleter(lys_node*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Deleter::Deleter(std::shared_ptr<libyang::Context>, lyxml_elem*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Deleter::~Deleter()@Base" 1.0.130
 (c++)"libyang::Deleter::~Deleter()@Base" 1.0.130
 (c++)"libyang::Deviate::ext()@Base" 1.0.130
 (c++)"libyang::Deviate::must()@Base" 1.0.130
 (c++)"libyang::Deviate::type()@Base" 1.0.130
 (c++)"libyang::Deviate::unique()@Base" 1.0.130
 (c++)"libyang::Deviate::Deviate(lys_deviate*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Deviate::Deviate(lys_deviate*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Deviate::~Deviate()@Base" 1.0.130
 (c++)"libyang::Deviate::~Deviate()@Base" 1.0.130
 (c++)"libyang::Feature::Feature(lys_feature*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Feature::Feature(lys_feature*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Feature::~Feature()@Base" 1.0.130
 (c++)"libyang::Feature::~Feature()@Base" 1.0.130
 (c++)"libyang::Include::Include(lys_include*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Include::Include(lys_include*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Include::~Include()@Base" 1.0.130
 (c++)"libyang::Include::~Include()@Base" 1.0.130
 (c++)"libyang::Substmt::Substmt(lyext_substmt*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Substmt::Substmt(lyext_substmt*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Substmt::~Substmt()@Base" 1.0.130
 (c++)"libyang::Substmt::~Substmt()@Base" 1.0.130
 (c++)"libyang::Difflist::first()@Base" 1.0.130
 (c++)"libyang::Difflist::second()@Base" 1.0.130
 (c++)"libyang::Difflist::Difflist(lyd_difflist*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Difflist::Difflist(lyd_difflist*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Difflist::~Difflist()@Base" 1.0.130
 (c++)"libyang::Difflist::~Difflist()@Base" 1.0.130
 (c++)"libyang::Revision::Revision(lys_revision*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Revision::Revision(lys_revision*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Revision::~Revision()@Base" 1.0.130
 (c++)"libyang::Revision::~Revision()@Base" 1.0.130
 (c++)"libyang::Type_Bit::ext()@Base" 1.0.130
 (c++)"libyang::Type_Bit::iffeature()@Base" 1.0.130
 (c++)"libyang::Type_Bit::Type_Bit(lys_type_bit*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Bit::Type_Bit(lys_type_bit*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Bit::~Type_Bit()@Base" 1.0.130
 (c++)"libyang::Type_Bit::~Type_Bit()@Base" 1.0.130
 (c++)"libyang::Xml_Attr::ns()@Base" 1.0.130
 (c++)"libyang::Xml_Attr::next()@Base" 1.0.130
 (c++)"libyang::Xml_Attr::Xml_Attr(lyxml_attr*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Xml_Attr::Xml_Attr(lyxml_attr*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Xml_Attr::~Xml_Attr()@Base" 1.0.130
 (c++)"libyang::Xml_Attr::~Xml_Attr()@Base" 1.0.130
 (c++)"libyang::Xml_Elem::ns()@Base" 1.0.130
 (c++)"libyang::Xml_Elem::attr()@Base" 1.0.130
 (c++)"libyang::Xml_Elem::next()@Base" 1.0.130
 (c++)"libyang::Xml_Elem::prev()@Base" 1.0.130
 (c++)"libyang::Xml_Elem::child()@Base" 1.0.130
 (c++)"libyang::Xml_Elem::get_ns(char const*)@Base" 1.0.130
 (c++)"libyang::Xml_Elem::parent()@Base" 1.0.130
 (c++)"libyang::Xml_Elem::get_attr(char const*, char const*)@Base" 1.0.130
 (c++)"libyang::Xml_Elem::tree_dfs()@Base" 1.0.130
 (c++)"libyang::Xml_Elem::tree_for()@Base" 1.0.130
 (c++|optional=jessie)"libyang::Xml_Elem::print_mem[abi:cxx11](int)@Base" 1.0.130
 (c++)"libyang::Xml_Elem::Xml_Elem(std::shared_ptr<libyang::Context>, lyxml_elem*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Xml_Elem::Xml_Elem(std::shared_ptr<libyang::Context>, lyxml_elem*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Xml_Elem::~Xml_Elem()@Base" 1.0.130
 (c++)"libyang::Xml_Elem::~Xml_Elem()@Base" 1.0.130
 (c++)"libyang::Data_Node::dup_to_ctx(int, std::shared_ptr<libyang::Context>)@Base" 1.0.130
 (c++)"libyang::Data_Node::insert_attr(std::shared_ptr<libyang::Module>, char const*, char const*)@Base" 1.0.130
 (c++)"libyang::Data_Node::node_module()@Base" 1.0.130
 (c++)"libyang::Data_Node::schema_sort(int)@Base" 1.0.130
 (c++)"libyang::Data_Node::insert_after(std::shared_ptr<libyang::Data_Node>)@Base" 1.0.130
 (c++)"libyang::Data_Node::merge_to_ctx(std::shared_ptr<libyang::Data_Node>, int, std::shared_ptr<libyang::Context>)@Base" 1.0.130
 (c++)"libyang::Data_Node::find_instance(std::shared_ptr<libyang::Schema_Node>)@Base" 1.0.130
 (c++)"libyang::Data_Node::first_sibling()@Base" 1.0.130
 (c++)"libyang::Data_Node::insert_before(std::shared_ptr<libyang::Data_Node>)@Base" 1.0.130
 (c++)"libyang::Data_Node::insert_sibling(std::shared_ptr<libyang::Data_Node>)@Base" 1.0.130
 (c++)"libyang::Data_Node::validate_value(char const*)@Base" 1.0.130
 (c++)"libyang::Data_Node::dup_withsiblings(int)@Base" 1.0.130
 (c++)"libyang::Data_Node::dup(int)@Base" 1.0.130
 (c++)"libyang::Data_Node::attr()@Base" 1.0.130
 (c++)"libyang::Data_Node::diff(std::shared_ptr<libyang::Data_Node>, int)@Base" 1.0.130
 (c++|optional=jessie)"libyang::Data_Node::path[abi:cxx11]()@Base" 1.0.130
 (c++)"libyang::Data_Node::child()@Base" 1.0.130
 (c++)"libyang::Data_Node::merge(std::shared_ptr<libyang::Data_Node>, int)@Base" 1.0.130
 (c++)"libyang::Data_Node::insert(std::shared_ptr<libyang::Data_Node>)@Base" 1.0.130
 (c++)"libyang::Data_Node::unlink()@Base" 1.0.130
 (c++)"libyang::Data_Node::list_pos()@Base" 1.0.130
 (c++)"libyang::Data_Node::new_path(std::shared_ptr<libyang::Context>, char const*, std::shared_ptr<libyang::Xml_Elem>, int)@Base" 1.0.130
 (c++)"libyang::Data_Node::new_path(std::shared_ptr<libyang::Context>, char const*, std::shared_ptr<libyang::Data_Node>, int)@Base" 1.0.130
 (c++)"libyang::Data_Node::new_path(std::shared_ptr<libyang::Context>, char const*, char const*, LYD_ANYDATA_VALUETYPE, int)@Base" 1.0.130
 (c++)"libyang::Data_Node::tree_dfs()@Base" 1.0.130
 (c++)"libyang::Data_Node::tree_for()@Base" 1.0.130
 (c++)"libyang::Data_Node::validate(int, std::shared_ptr<libyang::Context>)@Base" 1.0.130
 (c++)"libyang::Data_Node::validate(int, std::shared_ptr<libyang::Data_Node>)@Base" 1.0.130
 (c++)"libyang::Data_Node::find_path(char const*)@Base" 1.0.130
 (c++|optional=jessie)"libyang::Data_Node::print_mem[abi:cxx11](LYD_FORMAT, int)@Base" 1.0.130
 (c++)"libyang::Data_Node::Data_Node(lyd_node*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Data_Node::Data_Node(std::shared_ptr<libyang::Context>, char const*, std::shared_ptr<libyang::Xml_Elem>, int)@Base" 1.0.130
 (c++)"libyang::Data_Node::Data_Node(std::shared_ptr<libyang::Context>, char const*, std::shared_ptr<libyang::Data_Node>, int)@Base" 1.0.130
 (c++)"libyang::Data_Node::Data_Node(std::shared_ptr<libyang::Context>, char const*, char const*, LYD_ANYDATA_VALUETYPE, int)@Base" 1.0.130
 (c++)"libyang::Data_Node::Data_Node(std::shared_ptr<libyang::Data_Node>, std::shared_ptr<libyang::Module>, char const*)@Base" 1.0.130
 (c++)"libyang::Data_Node::Data_Node(std::shared_ptr<libyang::Data_Node>, std::shared_ptr<libyang::Module>, char const*, std::shared_ptr<libyang::Xml_Elem>)@Base" 1.0.130
 (c++)"libyang::Data_Node::Data_Node(std::shared_ptr<libyang::Data_Node>, std::shared_ptr<libyang::Module>, char const*, std::shared_ptr<libyang::Data_Node>)@Base" 1.0.130
 (c++)"libyang::Data_Node::Data_Node(std::shared_ptr<libyang::Data_Node>, std::shared_ptr<libyang::Module>, char const*, char const*, LYD_ANYDATA_VALUETYPE)@Base" 1.0.130
 (c++)"libyang::Data_Node::Data_Node(std::shared_ptr<libyang::Data_Node>, std::shared_ptr<libyang::Module>, char const*, char const*)@Base" 1.0.130
 (c++)"libyang::Data_Node::Data_Node(lyd_node*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Data_Node::Data_Node(std::shared_ptr<libyang::Context>, char const*, std::shared_ptr<libyang::Xml_Elem>, int)@Base" 1.0.130
 (c++)"libyang::Data_Node::Data_Node(std::shared_ptr<libyang::Context>, char const*, std::shared_ptr<libyang::Data_Node>, int)@Base" 1.0.130
 (c++)"libyang::Data_Node::Data_Node(std::shared_ptr<libyang::Context>, char const*, char const*, LYD_ANYDATA_VALUETYPE, int)@Base" 1.0.130
 (c++)"libyang::Data_Node::Data_Node(std::shared_ptr<libyang::Data_Node>, std::shared_ptr<libyang::Module>, char const*)@Base" 1.0.130
 (c++)"libyang::Data_Node::Data_Node(std::shared_ptr<libyang::Data_Node>, std::shared_ptr<libyang::Module>, char const*, std::shared_ptr<libyang::Xml_Elem>)@Base" 1.0.130
 (c++)"libyang::Data_Node::Data_Node(std::shared_ptr<libyang::Data_Node>, std::shared_ptr<libyang::Module>, char const*, std::shared_ptr<libyang::Data_Node>)@Base" 1.0.130
 (c++)"libyang::Data_Node::Data_Node(std::shared_ptr<libyang::Data_Node>, std::shared_ptr<libyang::Module>, char const*, char const*, LYD_ANYDATA_VALUETYPE)@Base" 1.0.130
 (c++)"libyang::Data_Node::Data_Node(std::shared_ptr<libyang::Data_Node>, std::shared_ptr<libyang::Module>, char const*, char const*)@Base" 1.0.130
 (c++)"libyang::Data_Node::~Data_Node()@Base" 1.0.130
 (c++)"libyang::Data_Node::~Data_Node()@Base" 1.0.130
 (c++)"libyang::Data_Node::~Data_Node()@Base" 1.0.130
 (c++)"libyang::Deviation::ext()@Base" 1.0.130
 (c++)"libyang::Deviation::deviate()@Base" 1.0.130
 (c++)"libyang::Deviation::orig_node()@Base" 1.0.130
 (c++)"libyang::Deviation::Deviation(lys_deviation*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Deviation::Deviation(lys_deviation*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Deviation::~Deviation()@Base" 1.0.130
 (c++)"libyang::Deviation::~Deviation()@Base" 1.0.130
 (c++)"libyang::Iffeature::ext()@Base" 1.0.130
 (c++)"libyang::Iffeature::value()@Base" 1.0.130
 (c++)"libyang::Iffeature::Iffeature(lys_iffeature*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Iffeature::Iffeature(lys_iffeature*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Iffeature::~Iffeature()@Base" 1.0.130
 (c++)"libyang::Iffeature::~Iffeature()@Base" 1.0.130
 (c++)"libyang::Submodule::rev()@Base" 1.0.130
 (c++)"libyang::Submodule::deviation()@Base" 1.0.130
 (c++)"libyang::Submodule::Submodule(lys_submodule*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Submodule::Submodule(std::shared_ptr<libyang::Module>)@Base" 1.0.176
 (c++)"libyang::Submodule::Submodule(lys_submodule*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Submodule::Submodule(std::shared_ptr<libyang::Module>)@Base" 1.0.176
 (c++)"libyang::Submodule::~Submodule()@Base" 1.0.130
 (c++)"libyang::Submodule::~Submodule()@Base" 1.0.130
 (c++)"libyang::Type_Enum::ext()@Base" 1.0.130
 (c++)"libyang::Type_Enum::iffeature()@Base" 1.0.130
 (c++)"libyang::Type_Enum::Type_Enum(lys_type_enum*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Enum::Type_Enum(lys_type_enum*, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Enum::~Type_Enum()@Base" 1.0.130
 (c++)"libyang::Type_Enum::~Type_Enum()@Base" 1.0.130
 (c++)"libyang::Type_Info::num()@Base" 1.0.130
 (c++)"libyang::Type_Info::str()@Base" 1.0.130
 (c++)"libyang::Type_Info::uni()@Base" 1.0.130
 (c++)"libyang::Type_Info::bits()@Base" 1.0.130
 (c++)"libyang::Type_Info::inst()@Base" 1.0.130
 (c++)"libyang::Type_Info::lref()@Base" 1.0.130
 (c++)"libyang::Type_Info::dec64()@Base" 1.0.130
 (c++)"libyang::Type_Info::enums()@Base" 1.0.130
 (c++)"libyang::Type_Info::ident()@Base" 1.0.130
 (c++)"libyang::Type_Info::binary()@Base" 1.0.130
 (c++)"libyang::Type_Info::Type_Info(lys_type_info, LY_DATA_TYPE*, unsigned char, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info::Type_Info(lys_type_info, LY_DATA_TYPE*, unsigned char, std::shared_ptr<libyang::Deleter>)@Base" 1.0.130
 (c++)"libyang::Type_Info::~Type_Info()@Base" 1.0.130
 (c++)"libyang::Type_Info::~Type_Info()@Base" 1.0.130
 (c++|optional=templinst)"std::__shared_ptr<libyang::Deleter, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<libyang::Deleter, (__gnu_cxx::_Lock_policy)2> const&)@Base" 1.0.130
 (c++|optional=templinst)"std::__shared_ptr<libyang::Deleter, (__gnu_cxx::_Lock_policy)2>::__shared_ptr(std::__shared_ptr<libyang::Deleter, (__gnu_cxx::_Lock_policy)2> const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Refine_Mod, std::allocator<libyang::Refine_Mod>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Refine_Mod, std::allocator<libyang::Refine_Mod>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Refine_Mod, std::allocator<libyang::Refine_Mod>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Refine_Mod, std::allocator<libyang::Refine_Mod>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Refine_Mod, std::allocator<libyang::Refine_Mod>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Refine_Mod, std::allocator<libyang::Refine_Mod>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node, std::allocator<libyang::Schema_Node>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node, std::allocator<libyang::Schema_Node>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node, std::allocator<libyang::Schema_Node>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node, std::allocator<libyang::Schema_Node>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node, std::allocator<libyang::Schema_Node>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node, std::allocator<libyang::Schema_Node>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Ext_Instance, std::allocator<libyang::Ext_Instance>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Ext_Instance, std::allocator<libyang::Ext_Instance>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Ext_Instance, std::allocator<libyang::Ext_Instance>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Ext_Instance, std::allocator<libyang::Ext_Instance>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Ext_Instance, std::allocator<libyang::Ext_Instance>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Ext_Instance, std::allocator<libyang::Ext_Instance>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Num, std::allocator<libyang::Type_Info_Num>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Num, std::allocator<libyang::Type_Info_Num>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Num, std::allocator<libyang::Type_Info_Num>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Num, std::allocator<libyang::Type_Info_Num>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Num, std::allocator<libyang::Type_Info_Num>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Num, std::allocator<libyang::Type_Info_Num>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Str, std::allocator<libyang::Type_Info_Str>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Str, std::allocator<libyang::Type_Info_Str>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Str, std::allocator<libyang::Type_Info_Str>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Str, std::allocator<libyang::Type_Info_Str>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Str, std::allocator<libyang::Type_Info_Str>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Str, std::allocator<libyang::Type_Info_Str>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Bits, std::allocator<libyang::Type_Info_Bits>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Bits, std::allocator<libyang::Type_Info_Bits>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Bits, std::allocator<libyang::Type_Info_Bits>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Bits, std::allocator<libyang::Type_Info_Bits>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Bits, std::allocator<libyang::Type_Info_Bits>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Bits, std::allocator<libyang::Type_Info_Bits>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Inst, std::allocator<libyang::Type_Info_Inst>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Inst, std::allocator<libyang::Type_Info_Inst>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Inst, std::allocator<libyang::Type_Info_Inst>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Inst, std::allocator<libyang::Type_Info_Inst>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Inst, std::allocator<libyang::Type_Info_Inst>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Inst, std::allocator<libyang::Type_Info_Inst>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Lref, std::allocator<libyang::Type_Info_Lref>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Lref, std::allocator<libyang::Type_Info_Lref>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Lref, std::allocator<libyang::Type_Info_Lref>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Lref, std::allocator<libyang::Type_Info_Lref>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Lref, std::allocator<libyang::Type_Info_Lref>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Lref, std::allocator<libyang::Type_Info_Lref>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Refine_Mod_List, std::allocator<libyang::Refine_Mod_List>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Refine_Mod_List, std::allocator<libyang::Refine_Mod_List>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Refine_Mod_List, std::allocator<libyang::Refine_Mod_List>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Refine_Mod_List, std::allocator<libyang::Refine_Mod_List>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Refine_Mod_List, std::allocator<libyang::Refine_Mod_List>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Refine_Mod_List, std::allocator<libyang::Refine_Mod_List>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Grp, std::allocator<libyang::Schema_Node_Grp>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Grp, std::allocator<libyang::Schema_Node_Grp>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Grp, std::allocator<libyang::Schema_Node_Grp>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Grp, std::allocator<libyang::Schema_Node_Grp>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Grp, std::allocator<libyang::Schema_Node_Grp>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Grp, std::allocator<libyang::Schema_Node_Grp>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Dec64, std::allocator<libyang::Type_Info_Dec64>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Dec64, std::allocator<libyang::Type_Info_Dec64>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Dec64, std::allocator<libyang::Type_Info_Dec64>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Dec64, std::allocator<libyang::Type_Info_Dec64>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Dec64, std::allocator<libyang::Type_Info_Dec64>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Dec64, std::allocator<libyang::Type_Info_Dec64>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Enums, std::allocator<libyang::Type_Info_Enums>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Enums, std::allocator<libyang::Type_Info_Enums>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Enums, std::allocator<libyang::Type_Info_Enums>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Enums, std::allocator<libyang::Type_Info_Enums>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Enums, std::allocator<libyang::Type_Info_Enums>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Enums, std::allocator<libyang::Type_Info_Enums>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Ident, std::allocator<libyang::Type_Info_Ident>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Ident, std::allocator<libyang::Type_Info_Ident>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Ident, std::allocator<libyang::Type_Info_Ident>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Ident, std::allocator<libyang::Type_Info_Ident>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Ident, std::allocator<libyang::Type_Info_Ident>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Ident, std::allocator<libyang::Type_Info_Ident>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Union, std::allocator<libyang::Type_Info_Union>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Union, std::allocator<libyang::Type_Info_Union>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Union, std::allocator<libyang::Type_Info_Union>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Union, std::allocator<libyang::Type_Info_Union>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Union, std::allocator<libyang::Type_Info_Union>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Union, std::allocator<libyang::Type_Info_Union>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Leaf, std::allocator<libyang::Schema_Node_Leaf>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Leaf, std::allocator<libyang::Schema_Node_Leaf>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Leaf, std::allocator<libyang::Schema_Node_Leaf>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Leaf, std::allocator<libyang::Schema_Node_Leaf>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Leaf, std::allocator<libyang::Schema_Node_Leaf>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Leaf, std::allocator<libyang::Schema_Node_Leaf>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_List, std::allocator<libyang::Schema_Node_List>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_List, std::allocator<libyang::Schema_Node_List>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_List, std::allocator<libyang::Schema_Node_List>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_List, std::allocator<libyang::Schema_Node_List>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_List, std::allocator<libyang::Schema_Node_List>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_List, std::allocator<libyang::Schema_Node_List>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Binary, std::allocator<libyang::Type_Info_Binary>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Binary, std::allocator<libyang::Type_Info_Binary>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Binary, std::allocator<libyang::Type_Info_Binary>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Binary, std::allocator<libyang::Type_Info_Binary>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Binary, std::allocator<libyang::Type_Info_Binary>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info_Binary, std::allocator<libyang::Type_Info_Binary>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Augment, std::allocator<libyang::Schema_Node_Augment>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Augment, std::allocator<libyang::Schema_Node_Augment>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Augment, std::allocator<libyang::Schema_Node_Augment>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Augment, std::allocator<libyang::Schema_Node_Augment>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Augment, std::allocator<libyang::Schema_Node_Augment>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Augment, std::allocator<libyang::Schema_Node_Augment>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Set, std::allocator<libyang::Set>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Set, std::allocator<libyang::Set>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Set, std::allocator<libyang::Set>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Set, std::allocator<libyang::Set>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Set, std::allocator<libyang::Set>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Set, std::allocator<libyang::Set>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Attr, std::allocator<libyang::Attr>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Attr, std::allocator<libyang::Attr>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Attr, std::allocator<libyang::Attr>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Attr, std::allocator<libyang::Attr>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Attr, std::allocator<libyang::Attr>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Attr, std::allocator<libyang::Attr>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Tpdf, std::allocator<libyang::Tpdf>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Tpdf, std::allocator<libyang::Tpdf>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Tpdf, std::allocator<libyang::Tpdf>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Tpdf, std::allocator<libyang::Tpdf>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Tpdf, std::allocator<libyang::Tpdf>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Tpdf, std::allocator<libyang::Tpdf>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type, std::allocator<libyang::Type>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type, std::allocator<libyang::Type>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type, std::allocator<libyang::Type>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type, std::allocator<libyang::Type>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type, std::allocator<libyang::Type>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type, std::allocator<libyang::Type>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::When, std::allocator<libyang::When>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::When, std::allocator<libyang::When>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::When, std::allocator<libyang::When>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::When, std::allocator<libyang::When>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::When, std::allocator<libyang::When>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::When, std::allocator<libyang::When>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Error, std::allocator<libyang::Error>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Error, std::allocator<libyang::Error>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Error, std::allocator<libyang::Error>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Error, std::allocator<libyang::Error>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Error, std::allocator<libyang::Error>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Error, std::allocator<libyang::Error>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Ident, std::allocator<libyang::Ident>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Ident, std::allocator<libyang::Ident>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Ident, std::allocator<libyang::Ident>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Ident, std::allocator<libyang::Ident>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Ident, std::allocator<libyang::Ident>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Ident, std::allocator<libyang::Ident>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Restr, std::allocator<libyang::Restr>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Restr, std::allocator<libyang::Restr>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Restr, std::allocator<libyang::Restr>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Restr, std::allocator<libyang::Restr>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Restr, std::allocator<libyang::Restr>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Restr, std::allocator<libyang::Restr>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Value, std::allocator<libyang::Value>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Value, std::allocator<libyang::Value>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Value, std::allocator<libyang::Value>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Value, std::allocator<libyang::Value>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Value, std::allocator<libyang::Value>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Value, std::allocator<libyang::Value>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Module, std::allocator<libyang::Module>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Module, std::allocator<libyang::Module>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Module, std::allocator<libyang::Module>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Module, std::allocator<libyang::Module>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Module, std::allocator<libyang::Module>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Module, std::allocator<libyang::Module>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Refine, std::allocator<libyang::Refine>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Refine, std::allocator<libyang::Refine>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Refine, std::allocator<libyang::Refine>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Refine, std::allocator<libyang::Refine>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Refine, std::allocator<libyang::Refine>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Refine, std::allocator<libyang::Refine>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Unique, std::allocator<libyang::Unique>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Unique, std::allocator<libyang::Unique>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Unique, std::allocator<libyang::Unique>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Unique, std::allocator<libyang::Unique>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Unique, std::allocator<libyang::Unique>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Unique, std::allocator<libyang::Unique>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Xml_Ns, std::allocator<libyang::Xml_Ns>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Xml_Ns, std::allocator<libyang::Xml_Ns>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Xml_Ns, std::allocator<libyang::Xml_Ns>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Xml_Ns, std::allocator<libyang::Xml_Ns>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Xml_Ns, std::allocator<libyang::Xml_Ns>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Xml_Ns, std::allocator<libyang::Xml_Ns>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Context, std::allocator<libyang::Context>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Context, std::allocator<libyang::Context>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Context, std::allocator<libyang::Context>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Context, std::allocator<libyang::Context>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Context, std::allocator<libyang::Context>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Context, std::allocator<libyang::Context>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Deleter, std::allocator<libyang::Deleter>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Deleter, std::allocator<libyang::Deleter>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Deleter, std::allocator<libyang::Deleter>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Deleter, std::allocator<libyang::Deleter>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Deleter, std::allocator<libyang::Deleter>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Deleter, std::allocator<libyang::Deleter>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Deviate, std::allocator<libyang::Deviate>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Deviate, std::allocator<libyang::Deviate>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Deviate, std::allocator<libyang::Deviate>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Deviate, std::allocator<libyang::Deviate>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Deviate, std::allocator<libyang::Deviate>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Deviate, std::allocator<libyang::Deviate>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Difflist, std::allocator<libyang::Difflist>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Difflist, std::allocator<libyang::Difflist>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Difflist, std::allocator<libyang::Difflist>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Difflist, std::allocator<libyang::Difflist>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Difflist, std::allocator<libyang::Difflist>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Difflist, std::allocator<libyang::Difflist>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Revision, std::allocator<libyang::Revision>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Revision, std::allocator<libyang::Revision>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Revision, std::allocator<libyang::Revision>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Revision, std::allocator<libyang::Revision>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Revision, std::allocator<libyang::Revision>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Revision, std::allocator<libyang::Revision>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Bit, std::allocator<libyang::Type_Bit>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Bit, std::allocator<libyang::Type_Bit>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Bit, std::allocator<libyang::Type_Bit>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Bit, std::allocator<libyang::Type_Bit>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Bit, std::allocator<libyang::Type_Bit>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Bit, std::allocator<libyang::Type_Bit>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Xml_Attr, std::allocator<libyang::Xml_Attr>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Xml_Attr, std::allocator<libyang::Xml_Attr>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Xml_Attr, std::allocator<libyang::Xml_Attr>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Xml_Attr, std::allocator<libyang::Xml_Attr>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Xml_Attr, std::allocator<libyang::Xml_Attr>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Xml_Attr, std::allocator<libyang::Xml_Attr>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Xml_Elem, std::allocator<libyang::Xml_Elem>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Xml_Elem, std::allocator<libyang::Xml_Elem>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Xml_Elem, std::allocator<libyang::Xml_Elem>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Xml_Elem, std::allocator<libyang::Xml_Elem>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Xml_Elem, std::allocator<libyang::Xml_Elem>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Xml_Elem, std::allocator<libyang::Xml_Elem>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Data_Node, std::allocator<libyang::Data_Node>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Data_Node, std::allocator<libyang::Data_Node>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Data_Node, std::allocator<libyang::Data_Node>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Data_Node, std::allocator<libyang::Data_Node>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Data_Node, std::allocator<libyang::Data_Node>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Data_Node, std::allocator<libyang::Data_Node>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Deviation, std::allocator<libyang::Deviation>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Deviation, std::allocator<libyang::Deviation>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Deviation, std::allocator<libyang::Deviation>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Deviation, std::allocator<libyang::Deviation>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Deviation, std::allocator<libyang::Deviation>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Deviation, std::allocator<libyang::Deviation>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Iffeature, std::allocator<libyang::Iffeature>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Iffeature, std::allocator<libyang::Iffeature>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Iffeature, std::allocator<libyang::Iffeature>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Iffeature, std::allocator<libyang::Iffeature>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Iffeature, std::allocator<libyang::Iffeature>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Iffeature, std::allocator<libyang::Iffeature>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Submodule, std::allocator<libyang::Submodule>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Submodule, std::allocator<libyang::Submodule>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Submodule, std::allocator<libyang::Submodule>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Submodule, std::allocator<libyang::Submodule>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Submodule, std::allocator<libyang::Submodule>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Submodule, std::allocator<libyang::Submodule>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Enum, std::allocator<libyang::Type_Enum>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Enum, std::allocator<libyang::Type_Enum>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Enum, std::allocator<libyang::Type_Enum>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Enum, std::allocator<libyang::Type_Enum>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Enum, std::allocator<libyang::Type_Enum>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Enum, std::allocator<libyang::Type_Enum>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info, std::allocator<libyang::Type_Info>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info, std::allocator<libyang::Type_Info>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info, std::allocator<libyang::Type_Info>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info, std::allocator<libyang::Type_Info>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info, std::allocator<libyang::Type_Info>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_counted_ptr_inplace<libyang::Type_Info, std::allocator<libyang::Type_Info>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::function<void (void*)> const*, std::allocator<std::function<void (void*)> const*> >::_M_realloc_insert<std::function<void (void*)> const*>(__gnu_cxx::__normal_iterator<std::function<void (void*)> const**, std::vector<std::function<void (void*)> const*, std::allocator<std::function<void (void*)> const*> > >, std::function<void (void*)> const*&&)@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Schema_Node>, std::allocator<std::shared_ptr<libyang::Schema_Node> > >::emplace_back<std::shared_ptr<libyang::Schema_Node> >(std::shared_ptr<libyang::Schema_Node>&&)@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Schema_Node>, std::allocator<std::shared_ptr<libyang::Schema_Node> > >::_M_realloc_insert<std::shared_ptr<libyang::Schema_Node> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libyang::Schema_Node>*, std::vector<std::shared_ptr<libyang::Schema_Node>, std::allocator<std::shared_ptr<libyang::Schema_Node> > > >, std::shared_ptr<libyang::Schema_Node>&&)@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Schema_Node>, std::allocator<std::shared_ptr<libyang::Schema_Node> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Schema_Node>, std::allocator<std::shared_ptr<libyang::Schema_Node> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Ext_Instance>, std::allocator<std::shared_ptr<libyang::Ext_Instance> > >::emplace_back<std::shared_ptr<libyang::Ext_Instance> >(std::shared_ptr<libyang::Ext_Instance>&&)@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Ext_Instance>, std::allocator<std::shared_ptr<libyang::Ext_Instance> > >::_M_realloc_insert<std::shared_ptr<libyang::Ext_Instance> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libyang::Ext_Instance>*, std::vector<std::shared_ptr<libyang::Ext_Instance>, std::allocator<std::shared_ptr<libyang::Ext_Instance> > > >, std::shared_ptr<libyang::Ext_Instance>&&)@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Ext_Instance>, std::allocator<std::shared_ptr<libyang::Ext_Instance> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Ext_Instance>, std::allocator<std::shared_ptr<libyang::Ext_Instance> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Schema_Node_Leaf>, std::allocator<std::shared_ptr<libyang::Schema_Node_Leaf> > >::_M_realloc_insert<std::shared_ptr<libyang::Schema_Node_Leaf> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libyang::Schema_Node_Leaf>*, std::vector<std::shared_ptr<libyang::Schema_Node_Leaf>, std::allocator<std::shared_ptr<libyang::Schema_Node_Leaf> > > >, std::shared_ptr<libyang::Schema_Node_Leaf>&&)@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Schema_Node_Augment>, std::allocator<std::shared_ptr<libyang::Schema_Node_Augment> > >::_M_realloc_insert<std::shared_ptr<libyang::Schema_Node_Augment> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libyang::Schema_Node_Augment>*, std::vector<std::shared_ptr<libyang::Schema_Node_Augment>, std::allocator<std::shared_ptr<libyang::Schema_Node_Augment> > > >, std::shared_ptr<libyang::Schema_Node_Augment>&&)@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Tpdf>, std::allocator<std::shared_ptr<libyang::Tpdf> > >::emplace_back<std::shared_ptr<libyang::Tpdf> >(std::shared_ptr<libyang::Tpdf>&&)@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Tpdf>, std::allocator<std::shared_ptr<libyang::Tpdf> > >::_M_realloc_insert<std::shared_ptr<libyang::Tpdf> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libyang::Tpdf>*, std::vector<std::shared_ptr<libyang::Tpdf>, std::allocator<std::shared_ptr<libyang::Tpdf> > > >, std::shared_ptr<libyang::Tpdf>&&)@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Tpdf>, std::allocator<std::shared_ptr<libyang::Tpdf> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Tpdf>, std::allocator<std::shared_ptr<libyang::Tpdf> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Type>, std::allocator<std::shared_ptr<libyang::Type> > >::_M_realloc_insert<std::shared_ptr<libyang::Type> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libyang::Type>*, std::vector<std::shared_ptr<libyang::Type>, std::allocator<std::shared_ptr<libyang::Type> > > >, std::shared_ptr<libyang::Type>&&)@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Error>, std::allocator<std::shared_ptr<libyang::Error> > >::_M_realloc_insert<std::shared_ptr<libyang::Error> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libyang::Error>*, std::vector<std::shared_ptr<libyang::Error>, std::allocator<std::shared_ptr<libyang::Error> > > >, std::shared_ptr<libyang::Error>&&)@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Ident>, std::allocator<std::shared_ptr<libyang::Ident> > >::emplace_back<std::shared_ptr<libyang::Ident> >(std::shared_ptr<libyang::Ident>&&)@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Ident>, std::allocator<std::shared_ptr<libyang::Ident> > >::_M_realloc_insert<std::shared_ptr<libyang::Ident> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libyang::Ident>*, std::vector<std::shared_ptr<libyang::Ident>, std::allocator<std::shared_ptr<libyang::Ident> > > >, std::shared_ptr<libyang::Ident>&&)@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Ident>, std::allocator<std::shared_ptr<libyang::Ident> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Ident>, std::allocator<std::shared_ptr<libyang::Ident> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Restr>, std::allocator<std::shared_ptr<libyang::Restr> > >::emplace_back<std::shared_ptr<libyang::Restr> >(std::shared_ptr<libyang::Restr>&&)@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Restr>, std::allocator<std::shared_ptr<libyang::Restr> > >::_M_realloc_insert<std::shared_ptr<libyang::Restr> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libyang::Restr>*, std::vector<std::shared_ptr<libyang::Restr>, std::allocator<std::shared_ptr<libyang::Restr> > > >, std::shared_ptr<libyang::Restr>&&)@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Restr>, std::allocator<std::shared_ptr<libyang::Restr> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Restr>, std::allocator<std::shared_ptr<libyang::Restr> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Module>, std::allocator<std::shared_ptr<libyang::Module> > >::emplace_back<std::shared_ptr<libyang::Module> >(std::shared_ptr<libyang::Module>&&)@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Module>, std::allocator<std::shared_ptr<libyang::Module> > >::_M_realloc_insert<std::shared_ptr<libyang::Module> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libyang::Module>*, std::vector<std::shared_ptr<libyang::Module>, std::allocator<std::shared_ptr<libyang::Module> > > >, std::shared_ptr<libyang::Module>&&)@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Module>, std::allocator<std::shared_ptr<libyang::Module> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Module>, std::allocator<std::shared_ptr<libyang::Module> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Refine>, std::allocator<std::shared_ptr<libyang::Refine> > >::_M_realloc_insert<std::shared_ptr<libyang::Refine> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libyang::Refine>*, std::vector<std::shared_ptr<libyang::Refine>, std::allocator<std::shared_ptr<libyang::Refine> > > >, std::shared_ptr<libyang::Refine>&&)@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Refine>, std::allocator<std::shared_ptr<libyang::Refine> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Refine>, std::allocator<std::shared_ptr<libyang::Refine> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Unique>, std::allocator<std::shared_ptr<libyang::Unique> > >::_M_realloc_insert<std::shared_ptr<libyang::Unique> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libyang::Unique>*, std::vector<std::shared_ptr<libyang::Unique>, std::allocator<std::shared_ptr<libyang::Unique> > > >, std::shared_ptr<libyang::Unique>&&)@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Unique>, std::allocator<std::shared_ptr<libyang::Unique> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Unique>, std::allocator<std::shared_ptr<libyang::Unique> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Deviate>, std::allocator<std::shared_ptr<libyang::Deviate> > >::_M_realloc_insert<std::shared_ptr<libyang::Deviate> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libyang::Deviate>*, std::vector<std::shared_ptr<libyang::Deviate>, std::allocator<std::shared_ptr<libyang::Deviate> > > >, std::shared_ptr<libyang::Deviate>&&)@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Type_Bit>, std::allocator<std::shared_ptr<libyang::Type_Bit> > >::_M_realloc_insert<std::shared_ptr<libyang::Type_Bit> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libyang::Type_Bit>*, std::vector<std::shared_ptr<libyang::Type_Bit>, std::allocator<std::shared_ptr<libyang::Type_Bit> > > >, std::shared_ptr<libyang::Type_Bit>&&)@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Xml_Elem>, std::allocator<std::shared_ptr<libyang::Xml_Elem> > >::emplace_back<std::shared_ptr<libyang::Xml_Elem> >(std::shared_ptr<libyang::Xml_Elem>&&)@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Xml_Elem>, std::allocator<std::shared_ptr<libyang::Xml_Elem> > >::_M_realloc_insert<std::shared_ptr<libyang::Xml_Elem> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libyang::Xml_Elem>*, std::vector<std::shared_ptr<libyang::Xml_Elem>, std::allocator<std::shared_ptr<libyang::Xml_Elem> > > >, std::shared_ptr<libyang::Xml_Elem>&&)@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Xml_Elem>, std::allocator<std::shared_ptr<libyang::Xml_Elem> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Xml_Elem>, std::allocator<std::shared_ptr<libyang::Xml_Elem> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Data_Node>, std::allocator<std::shared_ptr<libyang::Data_Node> > >::emplace_back<std::shared_ptr<libyang::Data_Node> >(std::shared_ptr<libyang::Data_Node>&&)@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Data_Node>, std::allocator<std::shared_ptr<libyang::Data_Node> > >::_M_realloc_insert<std::shared_ptr<libyang::Data_Node> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libyang::Data_Node>*, std::vector<std::shared_ptr<libyang::Data_Node>, std::allocator<std::shared_ptr<libyang::Data_Node> > > >, std::shared_ptr<libyang::Data_Node>&&)@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Data_Node>, std::allocator<std::shared_ptr<libyang::Data_Node> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Data_Node>, std::allocator<std::shared_ptr<libyang::Data_Node> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Deviation>, std::allocator<std::shared_ptr<libyang::Deviation> > >::emplace_back<std::shared_ptr<libyang::Deviation> >(std::shared_ptr<libyang::Deviation>&&)@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Deviation>, std::allocator<std::shared_ptr<libyang::Deviation> > >::_M_realloc_insert<std::shared_ptr<libyang::Deviation> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libyang::Deviation>*, std::vector<std::shared_ptr<libyang::Deviation>, std::allocator<std::shared_ptr<libyang::Deviation> > > >, std::shared_ptr<libyang::Deviation>&&)@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Deviation>, std::allocator<std::shared_ptr<libyang::Deviation> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Deviation>, std::allocator<std::shared_ptr<libyang::Deviation> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Iffeature>, std::allocator<std::shared_ptr<libyang::Iffeature> > >::emplace_back<std::shared_ptr<libyang::Iffeature> >(std::shared_ptr<libyang::Iffeature>&&)@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Iffeature>, std::allocator<std::shared_ptr<libyang::Iffeature> > >::_M_realloc_insert<std::shared_ptr<libyang::Iffeature> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libyang::Iffeature>*, std::vector<std::shared_ptr<libyang::Iffeature>, std::allocator<std::shared_ptr<libyang::Iffeature> > > >, std::shared_ptr<libyang::Iffeature>&&)@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Iffeature>, std::allocator<std::shared_ptr<libyang::Iffeature> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::shared_ptr<libyang::Iffeature>, std::allocator<std::shared_ptr<libyang::Iffeature> > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::shared_ptr<libyang::Type_Enum>, std::allocator<std::shared_ptr<libyang::Type_Enum> > >::_M_realloc_insert<std::shared_ptr<libyang::Type_Enum> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libyang::Type_Enum>*, std::vector<std::shared_ptr<libyang::Type_Enum>, std::allocator<std::shared_ptr<libyang::Type_Enum> > > >, std::shared_ptr<libyang::Type_Enum>&&)@Base" 1.0.130
 (c++|optional=templinst)"void std::vector<std::pair<std::function<libyang::Context::mod_missing_cb_return (char const*, char const*, char const*, char const*)>, std::function<void (void*)> >, std::allocator<std::pair<std::function<libyang::Context::mod_missing_cb_return (char const*, char const*, char const*, char const*)>, std::function<void (void*)> > > >::_M_realloc_insert<std::function<libyang::Context::mod_missing_cb_return (char const*, char const*, char const*, char const*)> const, std::function<void (void*)> const>(__gnu_cxx::__normal_iterator<std::pair<std::function<libyang::Context::mod_missing_cb_return (char const*, char const*, char const*, char const*)>, std::function<void (void*)> >*, std::vector<std::pair<std::function<libyang::Context::mod_missing_cb_return (char const*, char const*, char const*, char const*)>, std::function<void (void*)> >, std::allocator<std::pair<std::function<libyang::Context::mod_missing_cb_return (char const*, char const*, char const*, char const*)>, std::function<void (void*)> > > > >, std::function<libyang::Context::mod_missing_cb_return (char const*, char const*, char const*, char const*)> const&&, std::function<void (void*)> const&&)@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::pair<std::function<libyang::Context::mod_missing_cb_return (char const*, char const*, char const*, char const*)>, std::function<void (void*)> >, std::allocator<std::pair<std::function<libyang::Context::mod_missing_cb_return (char const*, char const*, char const*, char const*)>, std::function<void (void*)> > > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"std::vector<std::pair<std::function<libyang::Context::mod_missing_cb_return (char const*, char const*, char const*, char const*)>, std::function<void (void*)> >, std::allocator<std::pair<std::function<libyang::Context::mod_missing_cb_return (char const*, char const*, char const*, char const*)>, std::function<void (void*)> > > >::~vector()@Base" 1.0.130
 (c++|optional=templinst)"std::function<libyang::Context::mod_missing_cb_return (char const*, char const*, char const*, char const*)>::function(std::function<libyang::Context::mod_missing_cb_return (char const*, char const*, char const*, char const*)> const&)@Base" 1.0.130
 (c++|optional=templinst)"std::function<libyang::Context::mod_missing_cb_return (char const*, char const*, char const*, char const*)>::function(std::function<libyang::Context::mod_missing_cb_return (char const*, char const*, char const*, char const*)> const&)@Base" 1.0.130
 (c++|optional=templinst)"std::function<void (void*)>::function(std::function<void (void*)> const&)@Base" 1.0.130
 (c++|optional=templinst)"std::function<void (void*)>::function(std::function<void (void*)> const&)@Base" 1.0.130
 (c++)"typeinfo for libyang::Schema_Node@Base" 1.0.130
 (c++)"typeinfo for libyang::Schema_Node_Grp@Base" 1.0.130
 (c++)"typeinfo for libyang::Schema_Node_Case@Base" 1.0.130
 (c++)"typeinfo for libyang::Schema_Node_Leaf@Base" 1.0.130
 (c++)"typeinfo for libyang::Schema_Node_List@Base" 1.0.130
 (c++)"typeinfo for libyang::Schema_Node_Uses@Base" 1.0.130
 (c++)"typeinfo for libyang::Data_Node_Anydata@Base" 1.0.130
 (c++)"typeinfo for libyang::Schema_Node_Inout@Base" 1.0.130
 (c++)"typeinfo for libyang::Schema_Node_Notif@Base" 1.0.130
 (c++)"typeinfo for libyang::Schema_Node_Choice@Base" 1.0.130
 (c++)"typeinfo for libyang::Data_Node_Leaf_List@Base" 1.0.130
 (c++)"typeinfo for libyang::Schema_Node_Anydata@Base" 1.0.130
 (c++)"typeinfo for libyang::Schema_Node_Augment@Base" 1.0.130
 (c++)"typeinfo for libyang::Schema_Node_Leaflist@Base" 1.0.130
 (c++)"typeinfo for libyang::Schema_Node_Container@Base" 1.0.130
 (c++)"typeinfo for libyang::Schema_Node_Rpc_Action@Base" 1.0.130
 (c++)"typeinfo for libyang::Data_Node@Base" 1.0.130
 (c++)"typeinfo for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Refine_Mod, std::allocator<libyang::Refine_Mod>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Schema_Node, std::allocator<libyang::Schema_Node>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Ext_Instance, std::allocator<libyang::Ext_Instance>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Num, std::allocator<libyang::Type_Info_Num>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Str, std::allocator<libyang::Type_Info_Str>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Bits, std::allocator<libyang::Type_Info_Bits>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Inst, std::allocator<libyang::Type_Info_Inst>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Lref, std::allocator<libyang::Type_Info_Lref>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Refine_Mod_List, std::allocator<libyang::Refine_Mod_List>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Grp, std::allocator<libyang::Schema_Node_Grp>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Dec64, std::allocator<libyang::Type_Info_Dec64>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Enums, std::allocator<libyang::Type_Info_Enums>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Ident, std::allocator<libyang::Type_Info_Ident>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Union, std::allocator<libyang::Type_Info_Union>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Leaf, std::allocator<libyang::Schema_Node_Leaf>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Schema_Node_List, std::allocator<libyang::Schema_Node_List>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Binary, std::allocator<libyang::Type_Info_Binary>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Augment, std::allocator<libyang::Schema_Node_Augment>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Set, std::allocator<libyang::Set>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Attr, std::allocator<libyang::Attr>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Tpdf, std::allocator<libyang::Tpdf>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Type, std::allocator<libyang::Type>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::When, std::allocator<libyang::When>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Error, std::allocator<libyang::Error>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Ident, std::allocator<libyang::Ident>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Restr, std::allocator<libyang::Restr>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Value, std::allocator<libyang::Value>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Module, std::allocator<libyang::Module>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Refine, std::allocator<libyang::Refine>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Unique, std::allocator<libyang::Unique>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Xml_Ns, std::allocator<libyang::Xml_Ns>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Context, std::allocator<libyang::Context>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Deleter, std::allocator<libyang::Deleter>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Deviate, std::allocator<libyang::Deviate>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Difflist, std::allocator<libyang::Difflist>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Revision, std::allocator<libyang::Revision>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Type_Bit, std::allocator<libyang::Type_Bit>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Xml_Attr, std::allocator<libyang::Xml_Attr>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Xml_Elem, std::allocator<libyang::Xml_Elem>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Data_Node, std::allocator<libyang::Data_Node>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Deviation, std::allocator<libyang::Deviation>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Iffeature, std::allocator<libyang::Iffeature>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Submodule, std::allocator<libyang::Submodule>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Type_Enum, std::allocator<libyang::Type_Enum>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libyang::Type_Info, std::allocator<libyang::Type_Info>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for libyang::Schema_Node@Base" 1.0.130
 (c++)"typeinfo name for libyang::Schema_Node_Grp@Base" 1.0.130
 (c++)"typeinfo name for libyang::Schema_Node_Case@Base" 1.0.130
 (c++)"typeinfo name for libyang::Schema_Node_Leaf@Base" 1.0.130
 (c++)"typeinfo name for libyang::Schema_Node_List@Base" 1.0.130
 (c++)"typeinfo name for libyang::Schema_Node_Uses@Base" 1.0.130
 (c++)"typeinfo name for libyang::Data_Node_Anydata@Base" 1.0.130
 (c++)"typeinfo name for libyang::Schema_Node_Inout@Base" 1.0.130
 (c++)"typeinfo name for libyang::Schema_Node_Notif@Base" 1.0.130
 (c++)"typeinfo name for libyang::Schema_Node_Choice@Base" 1.0.130
 (c++)"typeinfo name for libyang::Data_Node_Leaf_List@Base" 1.0.130
 (c++)"typeinfo name for libyang::Schema_Node_Anydata@Base" 1.0.130
 (c++)"typeinfo name for libyang::Schema_Node_Augment@Base" 1.0.130
 (c++)"typeinfo name for libyang::Schema_Node_Leaflist@Base" 1.0.130
 (c++)"typeinfo name for libyang::Schema_Node_Container@Base" 1.0.130
 (c++)"typeinfo name for libyang::Schema_Node_Rpc_Action@Base" 1.0.130
 (c++)"typeinfo name for libyang::Data_Node@Base" 1.0.130
 (c++)"typeinfo name for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_make_shared_tag@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Refine_Mod, std::allocator<libyang::Refine_Mod>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Schema_Node, std::allocator<libyang::Schema_Node>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Ext_Instance, std::allocator<libyang::Ext_Instance>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Num, std::allocator<libyang::Type_Info_Num>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Str, std::allocator<libyang::Type_Info_Str>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Bits, std::allocator<libyang::Type_Info_Bits>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Inst, std::allocator<libyang::Type_Info_Inst>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Lref, std::allocator<libyang::Type_Info_Lref>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Refine_Mod_List, std::allocator<libyang::Refine_Mod_List>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Grp, std::allocator<libyang::Schema_Node_Grp>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Dec64, std::allocator<libyang::Type_Info_Dec64>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Enums, std::allocator<libyang::Type_Info_Enums>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Ident, std::allocator<libyang::Type_Info_Ident>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Union, std::allocator<libyang::Type_Info_Union>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Leaf, std::allocator<libyang::Schema_Node_Leaf>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Schema_Node_List, std::allocator<libyang::Schema_Node_List>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Binary, std::allocator<libyang::Type_Info_Binary>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Augment, std::allocator<libyang::Schema_Node_Augment>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Set, std::allocator<libyang::Set>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Attr, std::allocator<libyang::Attr>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Tpdf, std::allocator<libyang::Tpdf>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Type, std::allocator<libyang::Type>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::When, std::allocator<libyang::When>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Error, std::allocator<libyang::Error>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Ident, std::allocator<libyang::Ident>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Restr, std::allocator<libyang::Restr>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Value, std::allocator<libyang::Value>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Module, std::allocator<libyang::Module>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Refine, std::allocator<libyang::Refine>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Unique, std::allocator<libyang::Unique>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Xml_Ns, std::allocator<libyang::Xml_Ns>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Context, std::allocator<libyang::Context>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Deleter, std::allocator<libyang::Deleter>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Deviate, std::allocator<libyang::Deviate>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Difflist, std::allocator<libyang::Difflist>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Revision, std::allocator<libyang::Revision>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Type_Bit, std::allocator<libyang::Type_Bit>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Xml_Attr, std::allocator<libyang::Xml_Attr>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Xml_Elem, std::allocator<libyang::Xml_Elem>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Data_Node, std::allocator<libyang::Data_Node>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Deviation, std::allocator<libyang::Deviation>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Iffeature, std::allocator<libyang::Iffeature>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Submodule, std::allocator<libyang::Submodule>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Type_Enum, std::allocator<libyang::Type_Enum>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libyang::Type_Info, std::allocator<libyang::Type_Info>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for libyang::Schema_Node@Base" 1.0.130
 (c++)"vtable for libyang::Schema_Node_Grp@Base" 1.0.130
 (c++)"vtable for libyang::Schema_Node_Case@Base" 1.0.130
 (c++)"vtable for libyang::Schema_Node_Leaf@Base" 1.0.130
 (c++)"vtable for libyang::Schema_Node_List@Base" 1.0.130
 (c++)"vtable for libyang::Schema_Node_Uses@Base" 1.0.130
 (c++)"vtable for libyang::Data_Node_Anydata@Base" 1.0.130
 (c++)"vtable for libyang::Schema_Node_Inout@Base" 1.0.130
 (c++)"vtable for libyang::Schema_Node_Notif@Base" 1.0.130
 (c++)"vtable for libyang::Schema_Node_Choice@Base" 1.0.130
 (c++)"vtable for libyang::Data_Node_Leaf_List@Base" 1.0.130
 (c++)"vtable for libyang::Schema_Node_Anydata@Base" 1.0.130
 (c++)"vtable for libyang::Schema_Node_Augment@Base" 1.0.130
 (c++)"vtable for libyang::Schema_Node_Leaflist@Base" 1.0.130
 (c++)"vtable for libyang::Schema_Node_Container@Base" 1.0.130
 (c++)"vtable for libyang::Schema_Node_Rpc_Action@Base" 1.0.130
 (c++)"vtable for libyang::Data_Node@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Refine_Mod, std::allocator<libyang::Refine_Mod>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Schema_Node, std::allocator<libyang::Schema_Node>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Ext_Instance, std::allocator<libyang::Ext_Instance>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Num, std::allocator<libyang::Type_Info_Num>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Str, std::allocator<libyang::Type_Info_Str>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Bits, std::allocator<libyang::Type_Info_Bits>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Inst, std::allocator<libyang::Type_Info_Inst>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Lref, std::allocator<libyang::Type_Info_Lref>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Refine_Mod_List, std::allocator<libyang::Refine_Mod_List>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Grp, std::allocator<libyang::Schema_Node_Grp>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Dec64, std::allocator<libyang::Type_Info_Dec64>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Enums, std::allocator<libyang::Type_Info_Enums>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Ident, std::allocator<libyang::Type_Info_Ident>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Union, std::allocator<libyang::Type_Info_Union>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Leaf, std::allocator<libyang::Schema_Node_Leaf>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Schema_Node_List, std::allocator<libyang::Schema_Node_List>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Type_Info_Binary, std::allocator<libyang::Type_Info_Binary>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Schema_Node_Augment, std::allocator<libyang::Schema_Node_Augment>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Set, std::allocator<libyang::Set>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Attr, std::allocator<libyang::Attr>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Tpdf, std::allocator<libyang::Tpdf>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Type, std::allocator<libyang::Type>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::When, std::allocator<libyang::When>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Error, std::allocator<libyang::Error>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Ident, std::allocator<libyang::Ident>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Restr, std::allocator<libyang::Restr>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Value, std::allocator<libyang::Value>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Module, std::allocator<libyang::Module>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Refine, std::allocator<libyang::Refine>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Unique, std::allocator<libyang::Unique>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Xml_Ns, std::allocator<libyang::Xml_Ns>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Context, std::allocator<libyang::Context>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Deleter, std::allocator<libyang::Deleter>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Deviate, std::allocator<libyang::Deviate>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Difflist, std::allocator<libyang::Difflist>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Revision, std::allocator<libyang::Revision>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Type_Bit, std::allocator<libyang::Type_Bit>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Xml_Attr, std::allocator<libyang::Xml_Attr>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Xml_Elem, std::allocator<libyang::Xml_Elem>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Data_Node, std::allocator<libyang::Data_Node>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Deviation, std::allocator<libyang::Deviation>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Iffeature, std::allocator<libyang::Iffeature>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Submodule, std::allocator<libyang::Submodule>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Type_Enum, std::allocator<libyang::Type_Enum>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libyang::Type_Info, std::allocator<libyang::Type_Info>, (__gnu_cxx::_Lock_policy)2>@Base" 1.0.130
 (c++|optional=templinst)"std::_Sp_make_shared_tag::_S_ti()::__tag@Base" 1.0.130
